package NFR.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_Performance;
  private ConceptPresentation props_QuantifyNFR;
  private ConceptPresentation props_Safety;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.Performance:
        if (props_Performance == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Performance = cpb.create();
        }
        return props_Performance;
      case LanguageConceptSwitch.QuantifyNFR:
        if (props_QuantifyNFR == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("QuantifyNFR");
          props_QuantifyNFR = cpb.create();
        }
        return props_QuantifyNFR;
      case LanguageConceptSwitch.Safety:
        if (props_Safety == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Safety");
          props_Safety = cpb.create();
        }
        return props_Safety;
    }
    return null;
  }
}
