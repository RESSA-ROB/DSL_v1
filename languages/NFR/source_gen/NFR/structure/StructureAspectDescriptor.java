package NFR.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import java.util.Collection;
import java.util.Arrays;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder2;
import jetbrains.mps.smodel.adapter.ids.PrimitiveTypeId;

public class StructureAspectDescriptor extends BaseStructureAspectDescriptor {
  /*package*/ final ConceptDescriptor myConceptPerformance = createDescriptorForPerformance();
  /*package*/ final ConceptDescriptor myConceptQuantifyNFR = createDescriptorForQuantifyNFR();
  /*package*/ final ConceptDescriptor myConceptSafety = createDescriptorForSafety();
  private final LanguageConceptSwitch myIndexSwitch;

  public StructureAspectDescriptor() {
    myIndexSwitch = new LanguageConceptSwitch();
  }


  @Override
  public void reportDependencies(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.Dependencies deps) {
    deps.extendedLanguage(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, "jetbrains.mps.lang.core");
  }

  @Override
  public Collection<ConceptDescriptor> getDescriptors() {
    return Arrays.asList(myConceptPerformance, myConceptQuantifyNFR, myConceptSafety);
  }

  @Override
  @Nullable
  public ConceptDescriptor getDescriptor(SConceptId id) {
    switch (myIndexSwitch.index(id)) {
      case LanguageConceptSwitch.Performance:
        return myConceptPerformance;
      case LanguageConceptSwitch.QuantifyNFR:
        return myConceptQuantifyNFR;
      case LanguageConceptSwitch.Safety:
        return myConceptSafety;
      default:
        return null;
    }
  }


  /*package*/ int internalIndex(SAbstractConcept c) {
    return myIndexSwitch.index(c);
  }

  private static ConceptDescriptor createDescriptorForPerformance() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("NFR", "Performance", 0xddad85b58f7640d8L, 0x9a0dbd322c713e77L, 0x66d5a6d2efc1fb34L);
    b.class_(false, false, true);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L);
    b.origin("r:1719899a-db6b-455c-abab-be63243c90ab(NFR.structure)/7410012186803829556");
    b.version(2);
    b.property("response_time", 0x66d5a6d2efc1fb35L).type(PrimitiveTypeId.INTEGER).origin("7410012186803829557").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForQuantifyNFR() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("NFR", "QuantifyNFR", 0xddad85b58f7640d8L, 0x9a0dbd322c713e77L, 0x66d5a6d2efc2c6ebL);
    b.class_(false, false, true);
    b.origin("r:1719899a-db6b-455c-abab-be63243c90ab(NFR.structure)/7410012186803881707");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForSafety() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("NFR", "Safety", 0xddad85b58f7640d8L, 0x9a0dbd322c713e77L, 0x66d5a6d2efc2c321L);
    b.class_(false, false, false);
    b.super_("NFR.structure.QuantifyNFR", 0xddad85b58f7640d8L, 0x9a0dbd322c713e77L, 0x66d5a6d2efc2c6ebL);
    b.origin("r:1719899a-db6b-455c-abab-be63243c90ab(NFR.structure)/7410012186803880737");
    b.version(2);
    b.property("speed", 0x66d5a6d2efc2c322L).type(PrimitiveTypeId.INTEGER).origin("7410012186803880738").done();
    return b.create();
  }
}
