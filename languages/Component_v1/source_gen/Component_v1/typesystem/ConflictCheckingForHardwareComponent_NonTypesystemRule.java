package Component_v1.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractNonTypesystemRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.NonTypesystemRule_Runtime;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import java.util.Iterator;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import org.jetbrains.mps.openapi.language.SEnumerationLiteral;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SEnumOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.errors.messageTargets.MessageTarget;
import jetbrains.mps.errors.messageTargets.NodeMessageTarget;
import jetbrains.mps.errors.IErrorReporter;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import org.jetbrains.mps.openapi.language.SProperty;
import org.jetbrains.mps.openapi.language.SConcept;

public class ConflictCheckingForHardwareComponent_NonTypesystemRule extends AbstractNonTypesystemRule_Runtime implements NonTypesystemRule_Runtime {
  public ConflictCheckingForHardwareComponent_NonTypesystemRule() {
  }
  public void applyRule(final SNode hardwareComponent, final TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {
    List<String> NFR_conflict_pair = ListSequence.fromList(new ArrayList<String>());
    ListSequence.fromList(NFR_conflict_pair).addElement("Cost-Availability");
    ListSequence.fromList(NFR_conflict_pair).addElement("Cost-DeviceCapability");
    ListSequence.fromList(NFR_conflict_pair).addElement("Cost-DataInput");
    ListSequence.fromList(NFR_conflict_pair).addElement("Usability-Performance");
    ListSequence.fromList(NFR_conflict_pair).addElement("Usability-Efficiency");
    ListSequence.fromList(NFR_conflict_pair).addElement("Usability-Security");
    ListSequence.fromList(NFR_conflict_pair).addElement("Efficiency-Robustness");
    ListSequence.fromList(NFR_conflict_pair).addElement("EnergyEfficiency-Usability");
    ListSequence.fromList(NFR_conflict_pair).addElement("EnergyEfficiency-Performance");
    ListSequence.fromList(NFR_conflict_pair).addElement("EnergyEfficiency-Availability");
    ListSequence.fromList(NFR_conflict_pair).addElement("Mobility-EnergyEfficiency");
    ListSequence.fromList(NFR_conflict_pair).addElement("Performance-Availability");
    ListSequence.fromList(NFR_conflict_pair).addElement("Performance-Robustness");
    ListSequence.fromList(NFR_conflict_pair).addElement("Performance-Safety");
    ListSequence.fromList(NFR_conflict_pair).addElement("Security-Performance");
    ListSequence.fromList(NFR_conflict_pair).addElement("Mobility-Performance");
    ListSequence.fromList(NFR_conflict_pair).addElement("Reliability-Performance");
    ListSequence.fromList(NFR_conflict_pair).addElement("Reliability-Efficiency");
    ListSequence.fromList(NFR_conflict_pair).addElement("Safety-Usability");
    ListSequence.fromList(NFR_conflict_pair).addElement("Safety-Efficiency");
    ListSequence.fromList(NFR_conflict_pair).addElement("Privacy-Usability");
    ListSequence.fromList(NFR_conflict_pair).addElement("Security-Availability");
    ListSequence.fromList(NFR_conflict_pair).addElement("Privacy-Availability");
    ListSequence.fromList(NFR_conflict_pair).addElement("DataInput-Performance");
    ListSequence.fromList(NFR_conflict_pair).addElement("Calmness-Usability");

    // Reading NFR names for each component
    List<String> NFR_namesList = ListSequence.fromList(new ArrayList<String>());
    List<String> NFR_idListall = ListSequence.fromList(new ArrayList<String>());
    List<Integer> NFR_mostlikelyvalues = ListSequence.fromList(new ArrayList<Integer>());
    List<String> NFR_nameListDummy = ListSequence.fromList(new ArrayList<String>());
    int dummyListIndex = 0;
    {
      Iterator<SNode> nfr_it = ListSequence.fromList(SLinkOperations.getChildren(SLinkOperations.getTarget(hardwareComponent, LINKS.component$ISi3), LINKS.nfr$8n9A)).iterator();
      SNode nfr_var;
      while (nfr_it.hasNext()) {
        nfr_var = nfr_it.next();
        SEnumerationLiteral NFRname = SPropertyOperations.getEnum(nfr_var, PROPS.nfrmetric$kiL_);
        String NFRnameactual = "";
        if (NFRname.equals(SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0xddad85b58f7640d8L, 0x9a0dbd322c713e77L, 0x2405e2b0a9050702L, "NFR.structure.NFR_metric_names"), 0x2405e2b0a907f810L, "Calmness_calmTiming"))) {
          NFRnameactual = "Calmness";
        } else if (NFRname.equals(SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0xddad85b58f7640d8L, 0x9a0dbd322c713e77L, 0x2405e2b0a9050702L, "NFR.structure.NFR_metric_names"), 0x2405e2b0a9050704L, "Availability_Metric_Probability"))) {
          NFRnameactual = "Availability";
        } else if (NFRname.equals(SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0xddad85b58f7640d8L, 0x9a0dbd322c713e77L, 0x2405e2b0a9050702L, "NFR.structure.NFR_metric_names"), 0x2405e2b0a9050703L, "Cost_Total_cost_of_installation_or_use"))) {
          NFRnameactual = "Cost";
        } else if (NFRname.equals(SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0xddad85b58f7640d8L, 0x9a0dbd322c713e77L, 0x2405e2b0a9050702L, "NFR.structure.NFR_metric_names"), 0x2405e2b0a907f7a2L, "DataInput_Accuracy_Accuracy"))) {
          NFRnameactual = "DataInput";
        } else if (NFRname.equals(SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0xddad85b58f7640d8L, 0x9a0dbd322c713e77L, 0x2405e2b0a9050702L, "NFR.structure.NFR_metric_names"), 0x2405e2b0a907f79eL, "DeviceCapability_ClockSpeed"))) {
          NFRnameactual = "DeviceCapability";
        } else if (NFRname.equals(SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0xddad85b58f7640d8L, 0x9a0dbd322c713e77L, 0x2405e2b0a9050702L, "NFR.structure.NFR_metric_names"), 0x2405e2b0a907f7b4L, "Efficiency_maxtasks"))) {
          NFRnameactual = "Efficiency";
        } else if (NFRname.equals(SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0xddad85b58f7640d8L, 0x9a0dbd322c713e77L, 0x2405e2b0a9050702L, "NFR.structure.NFR_metric_names"), 0x2405e2b0a907f7cfL, "EneryEfficiency_energyConsumption"))) {
          NFRnameactual = "EnergyEfficiency";
        } else if (NFRname.equals(SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0xddad85b58f7640d8L, 0x9a0dbd322c713e77L, 0x2405e2b0a9050702L, "NFR.structure.NFR_metric_names"), 0x2405e2b0a907f7daL, "Mobility_binding"))) {
          NFRnameactual = "Mobility";
        } else if (NFRname.equals(SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0xddad85b58f7640d8L, 0x9a0dbd322c713e77L, 0x2405e2b0a9050702L, "NFR.structure.NFR_metric_names"), 0x2405e2b0a907f7adL, "Performance_response_time"))) {
          NFRnameactual = "Performance";
        } else if (NFRname.equals(SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0xddad85b58f7640d8L, 0x9a0dbd322c713e77L, 0x2405e2b0a9050702L, "NFR.structure.NFR_metric_names"), 0x2405e2b0a907f801L, "Privacy_information_leak"))) {
          NFRnameactual = "Privacy";
        } else if (NFRname.equals(SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0xddad85b58f7640d8L, 0x9a0dbd322c713e77L, 0x2405e2b0a9050702L, "NFR.structure.NFR_metric_names"), 0x2405e2b0a907f7f3L, "Reliability_precision_of_computation"))) {
          NFRnameactual = "Reliability";
        } else if (NFRname.equals(SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0xddad85b58f7640d8L, 0x9a0dbd322c713e77L, 0x2405e2b0a9050702L, "NFR.structure.NFR_metric_names"), 0x2405e2b0a907f7c5L, "Robustness_expectedTime"))) {
          NFRnameactual = "Robustness";
        } else if (NFRname.equals(SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0xddad85b58f7640d8L, 0x9a0dbd322c713e77L, 0x2405e2b0a9050702L, "NFR.structure.NFR_metric_names"), 0x2405e2b0a907f7e6L, "Safety_speed"))) {
          NFRnameactual = "Safety";
        } else if (NFRname.equals(SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0xddad85b58f7640d8L, 0x9a0dbd322c713e77L, 0x2405e2b0a9050702L, "NFR.structure.NFR_metric_names"), 0x2405e2b0a907f7bcL, "Security_encryptionLevel"))) {
          NFRnameactual = "Security";
        } else if (NFRname.equals(SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0xddad85b58f7640d8L, 0x9a0dbd322c713e77L, 0x2405e2b0a9050702L, "NFR.structure.NFR_metric_names"), 0x2405e2b0a907f7a7L, "Usability_training_learning_time"))) {
          NFRnameactual = "Usability";
        }
        if ((int) ListSequence.fromList(NFR_namesList).indexOf(NFRnameactual) == -1) {
          ListSequence.fromList(NFR_namesList).addElement(NFRnameactual);
        }
        String temp = NFRnameactual + " " + SPropertyOperations.getString(nfr_var, PROPS.name$MnvL);
        ListSequence.fromList(NFR_nameListDummy).addElement(NFRnameactual + SPropertyOperations.getString(nfr_var, PROPS.name$MnvL));
        ListSequence.fromList(NFR_mostlikelyvalues).addElement(SPropertyOperations.getInteger(nfr_var, PROPS.mostlikely$kpO3));
        ListSequence.fromList(NFR_idListall).addElement(SPropertyOperations.getString(nfr_var, PROPS.name$MnvL));

      }
    }
    int lengthI = dummyListIndex;
    // Steps for NFR ID selection when same NFR have different definitions
    List<String> NFR_idListconcise = ListSequence.fromList(new ArrayList<String>());
    int mostlikely = 0;
    String name = "";
    String id = "";
    for (String item : NFR_nameListDummy) {
      int index = ListSequence.fromList(NFR_nameListDummy).indexOf(item);
      if (item.contains("Cost")) {
        name = "Cost";
        int temp = ((int) ListSequence.fromList(NFR_mostlikelyvalues).getElement(index));
        if (mostlikely == 0) {
          mostlikely = temp;
          id = ListSequence.fromList(NFR_idListall).getElement(index);
        }
        if (mostlikely >= temp) {
          mostlikely = temp;
          id = ListSequence.fromList(NFR_idListall).getElement(index);

        }
      }
    }
    if (name.compareTo("") != 0) {
      String nfrid = name + "-" + id;
      ListSequence.fromList(NFR_idListconcise).addElement(nfrid);

    }
    mostlikely = 0;
    name = "";
    id = "";
    for (String item : NFR_nameListDummy) {
      int index = ListSequence.fromList(NFR_nameListDummy).indexOf(item);
      if (item.contains("Availability")) {
        name = "Availability";
        int temp = ((int) ListSequence.fromList(NFR_mostlikelyvalues).getElement(index));
        if (mostlikely == 0) {
          mostlikely = temp;
          id = ListSequence.fromList(NFR_idListall).getElement(index);
        }
        if (mostlikely <= temp) {
          mostlikely = temp;
          id = ListSequence.fromList(NFR_idListall).getElement(index);
        }
      }
    }
    if (name.compareTo("") != 0) {
      String nfrid = name + "-" + id;
      ListSequence.fromList(NFR_idListconcise).addElement(nfrid);

    }
    mostlikely = 0;
    name = "";
    id = "";
    for (String item : NFR_nameListDummy) {
      int index = ListSequence.fromList(NFR_nameListDummy).indexOf(item);
      if (item.contains("DeviceCapability")) {
        name = "DeviceCapability";
        int temp = ((int) ListSequence.fromList(NFR_mostlikelyvalues).getElement(index));
        if (mostlikely == 0) {
          mostlikely = temp;
          id = ListSequence.fromList(NFR_idListall).getElement(index);
        }
        if (mostlikely <= temp) {
          mostlikely = temp;
          id = ListSequence.fromList(NFR_idListall).getElement(index);
        }
      }
    }
    if (name.compareTo("") != 0) {
      String nfrid = name + "-" + id;
      ListSequence.fromList(NFR_idListconcise).addElement(nfrid);

    }
    mostlikely = 0;
    name = "";
    id = "";
    for (String item : NFR_nameListDummy) {
      int index = ListSequence.fromList(NFR_nameListDummy).indexOf(item);
      if (item.contains("DataInput")) {
        name = "DataInput";
        int temp = ((int) ListSequence.fromList(NFR_mostlikelyvalues).getElement(index));
        if (mostlikely == 0) {
          mostlikely = temp;
          id = ListSequence.fromList(NFR_idListall).getElement(index);
        }
        if (mostlikely <= temp) {
          mostlikely = temp;
          id = ListSequence.fromList(NFR_idListall).getElement(index);
        }
      }
    }
    if (name.compareTo("") != 0) {
      String nfrid = name + "-" + id;
      ListSequence.fromList(NFR_idListconcise).addElement(nfrid);
    }
    mostlikely = 0;
    name = "";
    id = "";
    for (String item : NFR_nameListDummy) {
      int index = ListSequence.fromList(NFR_nameListDummy).indexOf(item);
      if (item.contains("Usability")) {
        name = "Usability";
        int temp = ((int) ListSequence.fromList(NFR_mostlikelyvalues).getElement(index));
        if (mostlikely == 0) {
          mostlikely = temp;
          id = ListSequence.fromList(NFR_idListall).getElement(index);
        }
        if (mostlikely >= temp) {
          mostlikely = temp;
          id = ListSequence.fromList(NFR_idListall).getElement(index);
        }
      }
    }
    if (name.compareTo("") != 0) {
      String nfrid = name + "-" + id;
      ListSequence.fromList(NFR_idListconcise).addElement(nfrid);
    }
    mostlikely = 0;
    name = "";
    id = "";
    for (String item : NFR_nameListDummy) {
      int index = ListSequence.fromList(NFR_nameListDummy).indexOf(item);
      if (item.contains("Performance")) {
        name = "Performance";
        int temp = ((int) ListSequence.fromList(NFR_mostlikelyvalues).getElement(index));
        if (mostlikely == 0) {
          mostlikely = temp;
          id = ListSequence.fromList(NFR_idListall).getElement(index);
        }
        if (mostlikely >= temp) {
          mostlikely = temp;
          id = ListSequence.fromList(NFR_idListall).getElement(index);
        }
      }
    }
    if (name.compareTo("") != 0) {
      String nfrid = name + "-" + id;
      ListSequence.fromList(NFR_idListconcise).addElement(nfrid);
    }
    mostlikely = 0;
    name = "";
    id = "";
    for (String item : NFR_nameListDummy) {
      int index = ListSequence.fromList(NFR_nameListDummy).indexOf(item);
      if (item.contains("Efficiency")) {
        name = "Efficiency";
        int temp = ((int) ListSequence.fromList(NFR_mostlikelyvalues).getElement(index));
        if (mostlikely == 0) {
          mostlikely = temp;
          id = ListSequence.fromList(NFR_idListall).getElement(index);
        }
        if (mostlikely <= temp) {
          mostlikely = temp;
          id = ListSequence.fromList(NFR_idListall).getElement(index);
        }
      }
    }
    if (name.compareTo("") != 0) {
      String nfrid = name + "-" + id;
      ListSequence.fromList(NFR_idListconcise).addElement(nfrid);
    }
    mostlikely = 0;
    name = "";
    id = "";
    for (String item : NFR_nameListDummy) {
      int index = ListSequence.fromList(NFR_nameListDummy).indexOf(item);
      if (item.contains("Security")) {
        name = "Security";
        int temp = ((int) ListSequence.fromList(NFR_mostlikelyvalues).getElement(index));
        if (mostlikely == 0) {
          mostlikely = temp;
          id = ListSequence.fromList(NFR_idListall).getElement(index);
        }
        if (mostlikely <= temp) {
          mostlikely = temp;
          id = ListSequence.fromList(NFR_idListall).getElement(index);
        }
      }
    }
    if (name.compareTo("") != 0) {
      String nfrid = name + "-" + id;
      ListSequence.fromList(NFR_idListconcise).addElement(nfrid);
    }
    mostlikely = 0;
    name = "";
    id = "";
    for (String item : NFR_nameListDummy) {
      int index = ListSequence.fromList(NFR_nameListDummy).indexOf(item);
      if (item.contains("Robustness")) {
        name = "Robustness";
        int temp = ((int) ListSequence.fromList(NFR_mostlikelyvalues).getElement(index));
        if (mostlikely == 0) {
          mostlikely = temp;
          id = ListSequence.fromList(NFR_idListall).getElement(index);
        }
        if (mostlikely >= temp) {
          mostlikely = temp;
          id = ListSequence.fromList(NFR_idListall).getElement(index);
        }
      }
    }
    if (name.compareTo("") != 0) {
      String nfrid = name + "-" + id;
      ListSequence.fromList(NFR_idListconcise).addElement(nfrid);
    }
    mostlikely = 0;
    name = "";
    id = "";
    for (String item : NFR_nameListDummy) {
      int index = ListSequence.fromList(NFR_nameListDummy).indexOf(item);
      if (item.contains("EnergyEfficiency")) {
        name = "EnergyEfficiency";
        int temp = ((int) ListSequence.fromList(NFR_mostlikelyvalues).getElement(index));
        if (mostlikely == 0) {
          mostlikely = temp;
          id = ListSequence.fromList(NFR_idListall).getElement(index);
        }
        if (mostlikely >= temp) {
          mostlikely = temp;
          id = ListSequence.fromList(NFR_idListall).getElement(index);
        }
      }
    }
    if (name.compareTo("") != 0) {
      String nfrid = name + "-" + id;
      ListSequence.fromList(NFR_idListconcise).addElement(nfrid);
    }
    mostlikely = 0;
    name = "";
    id = "";
    for (String item : NFR_nameListDummy) {
      int index = ListSequence.fromList(NFR_nameListDummy).indexOf(item);
      if (item.contains("Mobility")) {
        name = "Mobility";
        int temp = ((int) ListSequence.fromList(NFR_mostlikelyvalues).getElement(index));
        if (mostlikely == 0) {
          mostlikely = temp;
          id = ListSequence.fromList(NFR_idListall).getElement(index);
        }
        if (mostlikely >= temp) {
          mostlikely = temp;
          id = ListSequence.fromList(NFR_idListall).getElement(index);
        }
      }
    }
    if (name.compareTo("") != 0) {
      String nfrid = name + "-" + id;
      ListSequence.fromList(NFR_idListconcise).addElement(nfrid);
    }
    mostlikely = 0;
    name = "";
    id = "";
    for (String item : NFR_nameListDummy) {
      int index = ListSequence.fromList(NFR_nameListDummy).indexOf(item);
      if (item.contains("Safety")) {
        name = "Safety";
        int temp = ((int) ListSequence.fromList(NFR_mostlikelyvalues).getElement(index));
        if (mostlikely == 0) {
          mostlikely = temp;
          id = ListSequence.fromList(NFR_idListall).getElement(index);
        }
        if (mostlikely <= temp) {
          mostlikely = temp;
          id = ListSequence.fromList(NFR_idListall).getElement(index);
        }
      }
    }
    if (name.compareTo("") != 0) {
      String nfrid = name + "-" + id;
      ListSequence.fromList(NFR_idListconcise).addElement(nfrid);
    }
    mostlikely = 0;
    name = "";
    id = "";
    for (String item : NFR_nameListDummy) {
      int index = ListSequence.fromList(NFR_nameListDummy).indexOf(item);
      if (item.contains("Reliability")) {
        name = "Reliability";
        int temp = ((int) ListSequence.fromList(NFR_mostlikelyvalues).getElement(index));
        if (mostlikely == 0) {
          mostlikely = temp;
          id = ListSequence.fromList(NFR_idListall).getElement(index);
        }
        if (mostlikely <= temp) {
          mostlikely = temp;
          id = ListSequence.fromList(NFR_idListall).getElement(index);
        }
      }
    }
    if (name.compareTo("") != 0) {
      String nfrid = name + "-" + id;
      ListSequence.fromList(NFR_idListconcise).addElement(nfrid);
    }
    mostlikely = 0;
    name = "";
    id = "";
    for (String item : NFR_nameListDummy) {
      int index = ListSequence.fromList(NFR_nameListDummy).indexOf(item);
      if (item.contains("Privacy")) {
        name = "Privacy";
        int temp = ((int) ListSequence.fromList(NFR_mostlikelyvalues).getElement(index));
        if (mostlikely == 0) {
          mostlikely = temp;
          id = ListSequence.fromList(NFR_idListall).getElement(index);
        }
        if (mostlikely >= temp) {
          mostlikely = temp;
          id = ListSequence.fromList(NFR_idListall).getElement(index);
        }
      }
    }
    if (name.compareTo("") != 0) {
      String nfrid = name + "-" + id;
      ListSequence.fromList(NFR_idListconcise).addElement(nfrid);
    }
    mostlikely = 0;
    name = "";
    id = "";
    for (String item : NFR_nameListDummy) {
      int index = ListSequence.fromList(NFR_nameListDummy).indexOf(item);
      if (item.contains("Calmness")) {
        name = "Calmness";
        int temp = ((int) ListSequence.fromList(NFR_mostlikelyvalues).getElement(index));
        if (mostlikely == 0) {
          mostlikely = temp;
          id = ListSequence.fromList(NFR_idListall).getElement(index);
        }
        if (mostlikely >= temp) {
          mostlikely = temp;
          id = ListSequence.fromList(NFR_idListall).getElement(index);
        }
      }
    }
    if (name.compareTo("") != 0) {
      String nfrid = name + "-" + id;
      ListSequence.fromList(NFR_idListconcise).addElement(nfrid);
    }

    // Steps for conflict identification
    int length = ListSequence.fromList(NFR_namesList).count();
    for (int i = 0; i < length - 1; i++) {
      String nfr1 = ListSequence.fromList(NFR_namesList).getElement(i);
      for (int j = i + 1; j < length; j++) {
        String nfr2 = ListSequence.fromList(NFR_namesList).getElement(j);
        String pair1 = nfr1 + "-" + nfr2;
        String pair2 = nfr2 + "-" + nfr1;
        String nfrid1 = "";
        String nfrid2 = "";
        {
          Iterator<String> item_it = ListSequence.fromList(NFR_idListconcise).iterator();
          String item_var;
          while (item_it.hasNext()) {
            item_var = item_it.next();
            if (item_var.contains(nfr1)) {
              nfrid1 = item_var;
            } else if (item_var.contains(nfr2)) {
              nfrid2 = item_var;
            }
          }
        }
        String pair3 = nfrid1 + "-" + nfrid2;
        if (ListSequence.fromList(NFR_conflict_pair).indexOf(pair1) != -1) {
          {
            final MessageTarget errorTarget = new NodeMessageTarget();
            IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(hardwareComponent, "The NFR pair " + pair3 + " are in conflict", "r:1524284d-b0a0-4e87-9b87-3259ef92f715(Component_v1.typesystem)", "5532793822132462467", null, errorTarget);
          }
        } else if (ListSequence.fromList(NFR_conflict_pair).indexOf(pair2) != -1) {
          {
            final MessageTarget errorTarget = new NodeMessageTarget();
            IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(hardwareComponent, "The NFR pair " + pair3 + " are in conflict", "r:1524284d-b0a0-4e87-9b87-3259ef92f715(Component_v1.typesystem)", "5532793822132487700", null, errorTarget);
          }
        }
      }
    }

  }
  public SAbstractConcept getApplicableConcept() {
    return CONCEPTS.HardwareComponent$OS;
  }
  public IsApplicableStatus isApplicableAndPattern(SNode argument) {
    return new IsApplicableStatus(argument.getConcept().isSubConceptOf(getApplicableConcept()), null);
  }
  public boolean overrides() {
    return false;
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink component$ISi3 = MetaAdapterFactory.getContainmentLink(0x79fb875b5c4f4986L, 0x892e2475e9d0c842L, 0x6a627af554be7033L, 0x74700d5d12d1f847L, "component");
    /*package*/ static final SContainmentLink nfr$8n9A = MetaAdapterFactory.getContainmentLink(0x79fb875b5c4f4986L, 0x892e2475e9d0c842L, 0x74700d5d12d180c0L, 0x74700d5d12d180c6L, "nfr");
  }

  private static final class PROPS {
    /*package*/ static final SProperty nfrmetric$kiL_ = MetaAdapterFactory.getProperty(0xddad85b58f7640d8L, 0x9a0dbd322c713e77L, 0x6a627af554ccd696L, 0x2405e2b0a90506f4L, "nfrmetric");
    /*package*/ static final SProperty name$MnvL = MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name");
    /*package*/ static final SProperty mostlikely$kpO3 = MetaAdapterFactory.getProperty(0xddad85b58f7640d8L, 0x9a0dbd322c713e77L, 0x6a627af554ccd696L, 0x2405e2b0a90506fdL, "mostlikely");
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept HardwareComponent$OS = MetaAdapterFactory.getConcept(0x79fb875b5c4f4986L, 0x892e2475e9d0c842L, 0x6a627af554be7033L, "Component_v1.structure.HardwareComponent");
  }
}
