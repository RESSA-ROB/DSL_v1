package Component_v1.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractNonTypesystemRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.NonTypesystemRule_Runtime;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import java.util.Iterator;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.errors.messageTargets.MessageTarget;
import jetbrains.mps.errors.messageTargets.NodeMessageTarget;
import jetbrains.mps.errors.IErrorReporter;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SProperty;
import org.jetbrains.mps.openapi.language.SConcept;

public class NFRNormalization_NonTypesystemRule extends AbstractNonTypesystemRule_Runtime implements NonTypesystemRule_Runtime {
  public NFRNormalization_NonTypesystemRule() {
  }
  public void applyRule(final SNode hardwareComponent, final TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {
    {
      Iterator<SNode> nfr_it = ListSequence.fromList(SLinkOperations.getChildren(SLinkOperations.getTarget(hardwareComponent, LINKS.component$ISi3), LINKS.nfr$8n9A)).iterator();
      SNode nfr_var;
      while (nfr_it.hasNext()) {
        nfr_var = nfr_it.next();
        int max = SPropertyOperations.getInteger(nfr_var, PROPS.maxvalue$kjfB);
        int min = SPropertyOperations.getInteger(nfr_var, PROPS.minvalue$kjWE);
        int mostlikelyval = SPropertyOperations.getInteger(nfr_var, PROPS.mostlikely$kpO3);
        int range = max - min;
        int numerator = mostlikelyval - min;
        double normalizedval = ((double) numerator) / ((double) range);
        int k = ((int) (normalizedval * 100));
        normalizedval = ((double) (((double) k) / ((double) 100)));
        {
          final MessageTarget errorTarget = new NodeMessageTarget();
          IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(hardwareComponent, "Normalized value for " + SPropertyOperations.getEnum(nfr_var, PROPS.nfrmetric$kiL_) + " is " + normalizedval, "r:1524284d-b0a0-4e87-9b87-3259ef92f715(Component_v1.typesystem)", "2595730008627175023", null, errorTarget);
        }
      }
    }
  }
  public SAbstractConcept getApplicableConcept() {
    return CONCEPTS.HardwareComponent$OS;
  }
  public IsApplicableStatus isApplicableAndPattern(SNode argument) {
    return new IsApplicableStatus(argument.getConcept().isSubConceptOf(getApplicableConcept()), null);
  }
  public boolean overrides() {
    return false;
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink component$ISi3 = MetaAdapterFactory.getContainmentLink(0x79fb875b5c4f4986L, 0x892e2475e9d0c842L, 0x6a627af554be7033L, 0x74700d5d12d1f847L, "component");
    /*package*/ static final SContainmentLink nfr$8n9A = MetaAdapterFactory.getContainmentLink(0x79fb875b5c4f4986L, 0x892e2475e9d0c842L, 0x74700d5d12d180c0L, 0x74700d5d12d180c6L, "nfr");
  }

  private static final class PROPS {
    /*package*/ static final SProperty maxvalue$kjfB = MetaAdapterFactory.getProperty(0xddad85b58f7640d8L, 0x9a0dbd322c713e77L, 0x6a627af554ccd696L, 0x2405e2b0a90506f6L, "maxvalue");
    /*package*/ static final SProperty minvalue$kjWE = MetaAdapterFactory.getProperty(0xddad85b58f7640d8L, 0x9a0dbd322c713e77L, 0x6a627af554ccd696L, 0x2405e2b0a90506f9L, "minvalue");
    /*package*/ static final SProperty mostlikely$kpO3 = MetaAdapterFactory.getProperty(0xddad85b58f7640d8L, 0x9a0dbd322c713e77L, 0x6a627af554ccd696L, 0x2405e2b0a90506fdL, "mostlikely");
    /*package*/ static final SProperty nfrmetric$kiL_ = MetaAdapterFactory.getProperty(0xddad85b58f7640d8L, 0x9a0dbd322c713e77L, 0x6a627af554ccd696L, 0x2405e2b0a90506f4L, "nfrmetric");
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept HardwareComponent$OS = MetaAdapterFactory.getConcept(0x79fb875b5c4f4986L, 0x892e2475e9d0c842L, 0x6a627af554be7033L, "Component_v1.structure.HardwareComponent");
  }
}
