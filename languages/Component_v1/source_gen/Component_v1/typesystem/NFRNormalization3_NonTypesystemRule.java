package Component_v1.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractNonTypesystemRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.NonTypesystemRule_Runtime;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.errors.messageTargets.MessageTarget;
import jetbrains.mps.errors.messageTargets.NodeMessageTarget;
import jetbrains.mps.errors.IErrorReporter;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import java.util.Iterator;
import org.jetbrains.mps.openapi.language.SEnumerationLiteral;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SEnumOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import org.jetbrains.mps.openapi.language.SProperty;
import org.jetbrains.mps.openapi.language.SConcept;

public class NFRNormalization3_NonTypesystemRule extends AbstractNonTypesystemRule_Runtime implements NonTypesystemRule_Runtime {
  public NFRNormalization3_NonTypesystemRule() {
  }
  public void applyRule(final SNode softwareComponent, final TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {
    String compname = SPropertyOperations.getString(SLinkOperations.getTarget(softwareComponent, LINKS.component$pKqJ), PROPS.id$T3zd);
    {
      final MessageTarget errorTarget = new NodeMessageTarget();
      IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(softwareComponent, "Component is : " + compname, "r:1524284d-b0a0-4e87-9b87-3259ef92f715(Component_v1.typesystem)", "9006907811572893087", null, errorTarget);
    }
    List<String> NFR_names = ListSequence.fromList(new ArrayList<String>());
    List<Integer> NFR_maxValues = ListSequence.fromList(new ArrayList<Integer>());
    List<Integer> NFR_minValues = ListSequence.fromList(new ArrayList<Integer>());
    List<Integer> NFR_mostlikelyValues = ListSequence.fromList(new ArrayList<Integer>());
    {
      Iterator<SNode> nfr_it = ListSequence.fromList(SLinkOperations.getChildren(SLinkOperations.getTarget(softwareComponent, LINKS.component$pKqJ), LINKS.nfr$Ta7D)).iterator();
      SNode nfr_var;
      while (nfr_it.hasNext()) {
        nfr_var = nfr_it.next();
        // Obtain the min, max and mostlikely value for each
        int max = SPropertyOperations.getInteger(nfr_var, PROPS.maxvalue$kjfB);
        int min = SPropertyOperations.getInteger(nfr_var, PROPS.minvalue$kjWE);
        int mostlikelyval = SPropertyOperations.getInteger(nfr_var, PROPS.mostlikely$kpO3);
        // Retrieve NFR name
        SEnumerationLiteral NFRname = SPropertyOperations.getEnum(nfr_var, PROPS.nfrmetric$kiL_);
        String NFRnameactual = "";
        if (NFRname.equals(SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0xddad85b58f7640d8L, 0x9a0dbd322c713e77L, 0x2405e2b0a9050702L, "NFR.structure.NFR_metric_names"), 0x2405e2b0a907f810L, "Calmness_calmTiming"))) {
          NFRnameactual = "Calmness_" + max + "_" + min + "_" + mostlikelyval;
        } else if (NFRname.equals(SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0xddad85b58f7640d8L, 0x9a0dbd322c713e77L, 0x2405e2b0a9050702L, "NFR.structure.NFR_metric_names"), 0x2405e2b0a9050704L, "Availability_Metric_Probability"))) {
          NFRnameactual = "Availability_" + max + "_" + min + "_" + mostlikelyval;
        } else if (NFRname.equals(SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0xddad85b58f7640d8L, 0x9a0dbd322c713e77L, 0x2405e2b0a9050702L, "NFR.structure.NFR_metric_names"), 0x2405e2b0a9050703L, "Cost_Total_cost_of_installation_or_use"))) {
          NFRnameactual = "Cost_" + max + "_" + min + "_" + mostlikelyval;
        } else if (NFRname.equals(SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0xddad85b58f7640d8L, 0x9a0dbd322c713e77L, 0x2405e2b0a9050702L, "NFR.structure.NFR_metric_names"), 0x2405e2b0a907f7a2L, "DataInput_Accuracy_Accuracy"))) {
          NFRnameactual = "DataInput_" + max + "_" + min + "_" + mostlikelyval;
        } else if (NFRname.equals(SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0xddad85b58f7640d8L, 0x9a0dbd322c713e77L, 0x2405e2b0a9050702L, "NFR.structure.NFR_metric_names"), 0x2405e2b0a907f79eL, "DeviceCapability_ClockSpeed"))) {
          NFRnameactual = "DeviceCapability_" + max + "_" + min + "_" + mostlikelyval;
        } else if (NFRname.equals(SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0xddad85b58f7640d8L, 0x9a0dbd322c713e77L, 0x2405e2b0a9050702L, "NFR.structure.NFR_metric_names"), 0x2405e2b0a907f7b4L, "Efficiency_maxtasks"))) {
          NFRnameactual = "Efficiency_" + max + "_" + min + "_" + mostlikelyval;
        } else if (NFRname.equals(SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0xddad85b58f7640d8L, 0x9a0dbd322c713e77L, 0x2405e2b0a9050702L, "NFR.structure.NFR_metric_names"), 0x2405e2b0a907f7cfL, "EneryEfficiency_energyConsumption"))) {
          NFRnameactual = "EnergyEfficiency_" + max + "_" + min + "_" + mostlikelyval;
        } else if (NFRname.equals(SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0xddad85b58f7640d8L, 0x9a0dbd322c713e77L, 0x2405e2b0a9050702L, "NFR.structure.NFR_metric_names"), 0x2405e2b0a907f7daL, "Mobility_binding"))) {
          NFRnameactual = "Mobility_" + max + "_" + min + "_" + mostlikelyval;
        } else if (NFRname.equals(SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0xddad85b58f7640d8L, 0x9a0dbd322c713e77L, 0x2405e2b0a9050702L, "NFR.structure.NFR_metric_names"), 0x2405e2b0a907f7adL, "Performance_response_time"))) {
          NFRnameactual = "Performance_" + max + "_" + min + "_" + mostlikelyval;
        } else if (NFRname.equals(SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0xddad85b58f7640d8L, 0x9a0dbd322c713e77L, 0x2405e2b0a9050702L, "NFR.structure.NFR_metric_names"), 0x2405e2b0a907f801L, "Privacy_information_leak"))) {
          NFRnameactual = "Privacy_" + max + "_" + min + "_" + mostlikelyval;
        } else if (NFRname.equals(SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0xddad85b58f7640d8L, 0x9a0dbd322c713e77L, 0x2405e2b0a9050702L, "NFR.structure.NFR_metric_names"), 0x2405e2b0a907f7f3L, "Reliability_precision_of_computation"))) {
          NFRnameactual = "Reliability_" + max + "_" + min + "_" + mostlikelyval;
        } else if (NFRname.equals(SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0xddad85b58f7640d8L, 0x9a0dbd322c713e77L, 0x2405e2b0a9050702L, "NFR.structure.NFR_metric_names"), 0x2405e2b0a907f7c5L, "Robustness_expectedTime"))) {
          NFRnameactual = "Robustness_" + max + "_" + min + "_" + mostlikelyval;
        } else if (NFRname.equals(SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0xddad85b58f7640d8L, 0x9a0dbd322c713e77L, 0x2405e2b0a9050702L, "NFR.structure.NFR_metric_names"), 0x2405e2b0a907f7e6L, "Safety_speed"))) {
          NFRnameactual = "Safety_" + max + "_" + min + "_" + mostlikelyval;
        } else if (NFRname.equals(SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0xddad85b58f7640d8L, 0x9a0dbd322c713e77L, 0x2405e2b0a9050702L, "NFR.structure.NFR_metric_names"), 0x2405e2b0a907f7bcL, "Security_encryptionLevel"))) {
          NFRnameactual = "Security_" + max + "_" + min + "_" + mostlikelyval;
        } else if (NFRname.equals(SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0xddad85b58f7640d8L, 0x9a0dbd322c713e77L, 0x2405e2b0a9050702L, "NFR.structure.NFR_metric_names"), 0x2405e2b0a907f7a7L, "Usability_training_learning_time"))) {
          NFRnameactual = "Usability_" + max + "_" + min + "_" + mostlikelyval;
        }


        // Doing check if exists
        ListSequence.fromList(NFR_names).addElement(NFRnameactual);
        ListSequence.fromList(NFR_maxValues).addElement(max);
        ListSequence.fromList(NFR_minValues).addElement(min);
        ListSequence.fromList(NFR_mostlikelyValues).addElement(mostlikelyval);
        // Compute the expected values
      }
    }
    // Checking for cost NFR
    int max = 0;
    int min = 0;
    int mostlikely = 0;
    int indexChosen = 0;
    int flag = 0;
    for (String item : NFR_names) {
      int index = ListSequence.fromList(NFR_names).indexOf(item);
      if (item.contains("Cost")) {
        flag = 1;
        int temp = ((int) ListSequence.fromList(NFR_mostlikelyValues).getElement(index));
        if (mostlikely == 0) {
          mostlikely = temp;
        }
        if (mostlikely >= temp) {
          mostlikely = temp;
          indexChosen = index;
        }
      }
    }
    if (flag == 1) {
      {
        final MessageTarget errorTarget = new NodeMessageTarget();
        IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(softwareComponent, "Cost: Most Likely -> " + mostlikely + "and index= " + indexChosen, "r:1524284d-b0a0-4e87-9b87-3259ef92f715(Component_v1.typesystem)", "9006907811572893690", null, errorTarget);
      }
      // Expected value of cost
      double expected = (((double) ListSequence.fromList(NFR_minValues).getElement(indexChosen)) + ((double) ListSequence.fromList(NFR_maxValues).getElement(indexChosen)) + ((double) 4) * ((double) ListSequence.fromList(NFR_mostlikelyValues).getElement(indexChosen))) / ((double) 6);
      {
        final MessageTarget errorTarget = new NodeMessageTarget();
        IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(softwareComponent, "Computed Expected value for Cost is : " + expected, "r:1524284d-b0a0-4e87-9b87-3259ef92f715(Component_v1.typesystem)", "9006907811572893739", null, errorTarget);
      }
      // Normalized Expected value
      double range = ((double) ListSequence.fromList(NFR_maxValues).getElement(indexChosen)) - ((double) ListSequence.fromList(NFR_minValues).getElement(indexChosen));
      double numerator = expected - ((double) ListSequence.fromList(NFR_minValues).getElement(indexChosen));
      double normalizedval = ((double) numerator) / ((double) range);
      int k = ((int) (normalizedval * 100));
      normalizedval = ((double) (((double) k) / ((double) 100)));
      {
        final MessageTarget errorTarget = new NodeMessageTarget();
        IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(softwareComponent, "Normalized value for Expected Cost is " + normalizedval, "r:1524284d-b0a0-4e87-9b87-3259ef92f715(Component_v1.typesystem)", "9006907811572893814", null, errorTarget);
      }
      flag = 0;
    }
    max = 0;
    min = 0;
    mostlikely = 0;
    indexChosen = 0;
    for (String item : NFR_names) {
      int index = ListSequence.fromList(NFR_names).indexOf(item);
      if (item.contains("Availability")) {
        flag = 1;
        int temp = ((int) ListSequence.fromList(NFR_mostlikelyValues).getElement(index));
        if (mostlikely == 0) {
          mostlikely = temp;
        }
        if (mostlikely <= temp) {
          mostlikely = temp;
          indexChosen = index;
        }
      }
    }
    if (flag == 1) {
      {
        final MessageTarget errorTarget = new NodeMessageTarget();
        IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(softwareComponent, "Availability: Most Likely -> " + mostlikely + "and index= " + indexChosen, "r:1524284d-b0a0-4e87-9b87-3259ef92f715(Component_v1.typesystem)", "9006907811572893937", null, errorTarget);
      }
      // Expected value of cost
      double expected = (((double) ListSequence.fromList(NFR_minValues).getElement(indexChosen)) + ((double) ListSequence.fromList(NFR_maxValues).getElement(indexChosen)) + ((double) 4) * ((double) ListSequence.fromList(NFR_mostlikelyValues).getElement(indexChosen))) / ((double) 6);
      {
        final MessageTarget errorTarget = new NodeMessageTarget();
        IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(softwareComponent, "Computed Expected value for Availability is : " + expected, "r:1524284d-b0a0-4e87-9b87-3259ef92f715(Component_v1.typesystem)", "9006907811572893986", null, errorTarget);
      }
      // Normalized Expected value
      double range = ((double) ListSequence.fromList(NFR_maxValues).getElement(indexChosen)) - ((double) ListSequence.fromList(NFR_minValues).getElement(indexChosen));
      double numerator = ((double) expected) - ((double) ListSequence.fromList(NFR_minValues).getElement(indexChosen));
      double normalizedval = ((double) numerator) / ((double) range);
      int k = ((int) (normalizedval * 100));
      normalizedval = ((double) (((double) k) / ((double) 100)));
      {
        final MessageTarget errorTarget = new NodeMessageTarget();
        IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(softwareComponent, "Normalized value for Expected Availability is " + normalizedval, "r:1524284d-b0a0-4e87-9b87-3259ef92f715(Component_v1.typesystem)", "9006907811572894064", null, errorTarget);
      }
      flag = 0;
    }
    max = 0;
    min = 0;
    mostlikely = 0;
    indexChosen = 0;
    for (String item : NFR_names) {
      int index = ListSequence.fromList(NFR_names).indexOf(item);
      if (item.contains("DeviceCapability")) {
        flag = 1;
        int temp = ((int) ListSequence.fromList(NFR_mostlikelyValues).getElement(index));
        if (mostlikely == 0) {
          mostlikely = temp;
        }
        if (mostlikely <= temp) {
          mostlikely = temp;
          indexChosen = index;
        }
      }
    }
    if (flag == 1) {
      {
        final MessageTarget errorTarget = new NodeMessageTarget();
        IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(softwareComponent, "Device Capability: Most Likely -> " + mostlikely + "and index= " + indexChosen, "r:1524284d-b0a0-4e87-9b87-3259ef92f715(Component_v1.typesystem)", "9006907811572894187", null, errorTarget);
      }
      // Expected value of cost
      double expected = (((double) ListSequence.fromList(NFR_minValues).getElement(indexChosen)) + ((double) ListSequence.fromList(NFR_maxValues).getElement(indexChosen)) + ((double) 4) * ((double) ListSequence.fromList(NFR_mostlikelyValues).getElement(indexChosen))) / ((double) 6);
      {
        final MessageTarget errorTarget = new NodeMessageTarget();
        IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(softwareComponent, "Computed Expected value for Device Capability is : " + expected, "r:1524284d-b0a0-4e87-9b87-3259ef92f715(Component_v1.typesystem)", "9006907811572894236", null, errorTarget);
      }
      // Normalized Expected value
      double range = ((double) ListSequence.fromList(NFR_maxValues).getElement(indexChosen)) - ((double) ListSequence.fromList(NFR_minValues).getElement(indexChosen));
      double numerator = expected - ((double) ListSequence.fromList(NFR_minValues).getElement(indexChosen));
      double normalizedval = ((double) numerator) / ((double) range);
      int k = ((int) (normalizedval * 100));
      normalizedval = ((double) (((double) k) / ((double) 100)));
      {
        final MessageTarget errorTarget = new NodeMessageTarget();
        IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(softwareComponent, "Normalized value for Expected Device Capability is " + normalizedval, "r:1524284d-b0a0-4e87-9b87-3259ef92f715(Component_v1.typesystem)", "9006907811572894311", null, errorTarget);
      }
      flag = 0;
    }

    max = 0;
    min = 0;
    mostlikely = 0;
    indexChosen = 0;
    for (String item : NFR_names) {
      int index = ListSequence.fromList(NFR_names).indexOf(item);
      if (item.contains("DataInput")) {
        flag = 1;
        int temp = ((int) ListSequence.fromList(NFR_mostlikelyValues).getElement(index));
        if (mostlikely == 0) {
          mostlikely = temp;
        }
        if (mostlikely <= temp) {
          mostlikely = temp;
          indexChosen = index;
        }
      }
    }
    if (flag == 1) {
      {
        final MessageTarget errorTarget = new NodeMessageTarget();
        IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(softwareComponent, "Data Input: Most Likely -> " + mostlikely + "and index= " + indexChosen, "r:1524284d-b0a0-4e87-9b87-3259ef92f715(Component_v1.typesystem)", "9006907811572894435", null, errorTarget);
      }
      // Expected value of cost
      double expected = (((double) ListSequence.fromList(NFR_minValues).getElement(indexChosen)) + ((double) ListSequence.fromList(NFR_maxValues).getElement(indexChosen)) + ((double) 4) * ((double) ListSequence.fromList(NFR_mostlikelyValues).getElement(indexChosen))) / ((double) 6);
      {
        final MessageTarget errorTarget = new NodeMessageTarget();
        IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(softwareComponent, "Computed Expected value for Data Input is : " + expected, "r:1524284d-b0a0-4e87-9b87-3259ef92f715(Component_v1.typesystem)", "9006907811572894484", null, errorTarget);
      }
      // Normalized Expected value
      double range = ((double) ListSequence.fromList(NFR_maxValues).getElement(indexChosen)) - ((double) ListSequence.fromList(NFR_minValues).getElement(indexChosen));
      double numerator = expected - ((double) ListSequence.fromList(NFR_minValues).getElement(indexChosen));
      double normalizedval = ((double) numerator) / ((double) range);
      int k = ((int) (normalizedval * 100));
      normalizedval = ((double) (((double) k) / ((double) 100)));
      {
        final MessageTarget errorTarget = new NodeMessageTarget();
        IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(softwareComponent, "Normalized value for Expected Data Input is " + normalizedval, "r:1524284d-b0a0-4e87-9b87-3259ef92f715(Component_v1.typesystem)", "9006907811572894559", null, errorTarget);
      }
      flag = 0;
    }
    max = 0;
    min = 0;
    mostlikely = 0;
    indexChosen = 0;
    for (String item : NFR_names) {
      int index = ListSequence.fromList(NFR_names).indexOf(item);
      if (item.contains("Usability")) {
        flag = 1;
        int temp = ((int) ListSequence.fromList(NFR_mostlikelyValues).getElement(index));
        if (mostlikely == 0) {
          mostlikely = temp;
        }
        if (mostlikely >= temp) {
          mostlikely = temp;
          indexChosen = index;
        }
      }
    }
    if (flag == 1) {
      {
        final MessageTarget errorTarget = new NodeMessageTarget();
        IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(softwareComponent, "Usability: Most Likely -> " + mostlikely + "and index= " + indexChosen, "r:1524284d-b0a0-4e87-9b87-3259ef92f715(Component_v1.typesystem)", "9006907811572894682", null, errorTarget);
      }
      // Expected value of cost
      double expected = (((double) ListSequence.fromList(NFR_minValues).getElement(indexChosen)) + ((double) ListSequence.fromList(NFR_maxValues).getElement(indexChosen)) + ((double) 4) * ((double) ListSequence.fromList(NFR_mostlikelyValues).getElement(indexChosen))) / ((double) 6);
      {
        final MessageTarget errorTarget = new NodeMessageTarget();
        IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(softwareComponent, "Computed Expected value for Usability is : " + expected, "r:1524284d-b0a0-4e87-9b87-3259ef92f715(Component_v1.typesystem)", "9006907811572894731", null, errorTarget);
      }
      // Normalized Expected value
      double range = ((double) ListSequence.fromList(NFR_maxValues).getElement(indexChosen)) - ((double) ListSequence.fromList(NFR_minValues).getElement(indexChosen));
      double numerator = expected - ((double) ListSequence.fromList(NFR_minValues).getElement(indexChosen));
      double normalizedval = ((double) numerator) / ((double) range);
      int k = ((int) (normalizedval * 100));
      normalizedval = ((double) (((double) k) / ((double) 100)));
      {
        final MessageTarget errorTarget = new NodeMessageTarget();
        IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(softwareComponent, "Normalized value for Expected Usability is " + normalizedval, "r:1524284d-b0a0-4e87-9b87-3259ef92f715(Component_v1.typesystem)", "9006907811572894806", null, errorTarget);
      }
      flag = 0;
    }
    max = 0;
    min = 0;
    mostlikely = 0;
    indexChosen = -1;
    for (String item : NFR_names) {
      int index = ListSequence.fromList(NFR_names).indexOf(item);
      if (item.contains("Performance")) {
        flag = 1;
        int temp = ((int) ListSequence.fromList(NFR_mostlikelyValues).getElement(index));
        if (mostlikely == 0) {
          mostlikely = temp;
        }
        if (mostlikely >= temp) {
          mostlikely = temp;
          indexChosen = index;
        }
      }
    }
    if (flag == 1) {
      {
        final MessageTarget errorTarget = new NodeMessageTarget();
        IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(softwareComponent, "Performance: Most Likely -> " + mostlikely + "and index= " + indexChosen, "r:1524284d-b0a0-4e87-9b87-3259ef92f715(Component_v1.typesystem)", "9006907811572894924", null, errorTarget);
      }
      // Expected value of cost
      double expected = (((double) ListSequence.fromList(NFR_minValues).getElement(indexChosen)) + ((double) ListSequence.fromList(NFR_maxValues).getElement(indexChosen)) + ((double) 4) * ((double) ListSequence.fromList(NFR_mostlikelyValues).getElement(indexChosen))) / ((double) 6);
      {
        final MessageTarget errorTarget = new NodeMessageTarget();
        IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(softwareComponent, "Computed Expected value for Performance is : " + expected, "r:1524284d-b0a0-4e87-9b87-3259ef92f715(Component_v1.typesystem)", "9006907811572894973", null, errorTarget);
      }
      // Normalized Expected value
      double range = ((double) ListSequence.fromList(NFR_maxValues).getElement(indexChosen)) - ((double) ListSequence.fromList(NFR_minValues).getElement(indexChosen));
      double numerator = expected - ((double) ListSequence.fromList(NFR_minValues).getElement(indexChosen));
      double normalizedval = ((double) numerator) / ((double) range);
      int k = ((int) (normalizedval * 100));
      normalizedval = ((double) (((double) k) / ((double) 100)));
      {
        final MessageTarget errorTarget = new NodeMessageTarget();
        IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(softwareComponent, "Normalized value for Expected Performance is " + normalizedval, "r:1524284d-b0a0-4e87-9b87-3259ef92f715(Component_v1.typesystem)", "9006907811572895048", null, errorTarget);
      }
      flag = 0;
    }
    max = 0;
    min = 0;
    mostlikely = 0;
    indexChosen = 0;
    for (String item : NFR_names) {
      int index = ListSequence.fromList(NFR_names).indexOf(item);
      if (item.contains("Efficiency")) {
        flag = 1;
        int temp = ((int) ListSequence.fromList(NFR_mostlikelyValues).getElement(index));
        if (mostlikely == 0) {
          mostlikely = temp;
        }
        if (mostlikely <= temp) {
          mostlikely = temp;
          indexChosen = index;
        }
      }
    }
    if (flag == 1) {
      {
        final MessageTarget errorTarget = new NodeMessageTarget();
        IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(softwareComponent, "Efficiency: Most Likely -> " + mostlikely + "and index= " + indexChosen, "r:1524284d-b0a0-4e87-9b87-3259ef92f715(Component_v1.typesystem)", "9006907811572895171", null, errorTarget);
      }
      // Expected value of cost
      double expected = (((double) ListSequence.fromList(NFR_minValues).getElement(indexChosen)) + ((double) ListSequence.fromList(NFR_maxValues).getElement(indexChosen)) + ((double) 4) * ((double) ListSequence.fromList(NFR_mostlikelyValues).getElement(indexChosen))) / ((double) 6);
      {
        final MessageTarget errorTarget = new NodeMessageTarget();
        IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(softwareComponent, "Computed Expected value for Efficiency is : " + expected, "r:1524284d-b0a0-4e87-9b87-3259ef92f715(Component_v1.typesystem)", "9006907811572895220", null, errorTarget);
      }
      // Normalized Expected value
      double range = ((double) ListSequence.fromList(NFR_maxValues).getElement(indexChosen)) - ((double) ListSequence.fromList(NFR_minValues).getElement(indexChosen));
      double numerator = expected - ((double) ListSequence.fromList(NFR_minValues).getElement(indexChosen));
      double normalizedval = ((double) numerator) / ((double) range);
      int k = ((int) (normalizedval * 100));
      normalizedval = ((double) (((double) k) / ((double) 100)));
      {
        final MessageTarget errorTarget = new NodeMessageTarget();
        IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(softwareComponent, "Normalized value for Expected Efficiency is " + normalizedval, "r:1524284d-b0a0-4e87-9b87-3259ef92f715(Component_v1.typesystem)", "9006907811572895295", null, errorTarget);
      }
      flag = 0;
    }
    max = 0;
    min = 0;
    mostlikely = 0;
    indexChosen = 0;
    for (String item : NFR_names) {
      int index = ListSequence.fromList(NFR_names).indexOf(item);
      if (item.contains("Security")) {
        flag = 1;
        int temp = ((int) ListSequence.fromList(NFR_mostlikelyValues).getElement(index));
        if (mostlikely == 0) {
          mostlikely = temp;
        }
        if (mostlikely <= temp) {
          mostlikely = temp;
          indexChosen = index;
        }
      }
    }
    if (flag == 1) {
      {
        final MessageTarget errorTarget = new NodeMessageTarget();
        IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(softwareComponent, "Security: Most Likely -> " + mostlikely + "and index= " + indexChosen, "r:1524284d-b0a0-4e87-9b87-3259ef92f715(Component_v1.typesystem)", "9006907811572895418", null, errorTarget);
      }
      // Expected value of cost
      double expected = (((double) ListSequence.fromList(NFR_minValues).getElement(indexChosen)) + ((double) ListSequence.fromList(NFR_maxValues).getElement(indexChosen)) + ((double) 4) * ((double) ListSequence.fromList(NFR_mostlikelyValues).getElement(indexChosen))) / ((double) 6);
      {
        final MessageTarget errorTarget = new NodeMessageTarget();
        IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(softwareComponent, "Computed Expected value for Security is : " + expected, "r:1524284d-b0a0-4e87-9b87-3259ef92f715(Component_v1.typesystem)", "9006907811572895467", null, errorTarget);
      }
      // Normalized Expected value
      double range = ((double) ListSequence.fromList(NFR_maxValues).getElement(indexChosen)) - ((double) ListSequence.fromList(NFR_minValues).getElement(indexChosen));
      double numerator = expected - ((double) ListSequence.fromList(NFR_minValues).getElement(indexChosen));
      double normalizedval = ((double) numerator) / ((double) range);
      int k = ((int) (normalizedval * 100));
      normalizedval = ((double) (((double) k) / ((double) 100)));
      {
        final MessageTarget errorTarget = new NodeMessageTarget();
        IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(softwareComponent, "Normalized value for Expected Security is " + normalizedval, "r:1524284d-b0a0-4e87-9b87-3259ef92f715(Component_v1.typesystem)", "9006907811572895542", null, errorTarget);
      }
      flag = 0;
    }
    max = 0;
    min = 0;
    mostlikely = 0;
    indexChosen = 0;
    for (String item : NFR_names) {
      int index = ListSequence.fromList(NFR_names).indexOf(item);
      if (item.contains("Robustness")) {
        flag = 1;
        int temp = ((int) ListSequence.fromList(NFR_mostlikelyValues).getElement(index));
        if (mostlikely == 0) {
          mostlikely = temp;
        }
        if (mostlikely >= temp) {
          mostlikely = temp;
          indexChosen = index;
        }
      }
    }
    if (flag == 1) {
      {
        final MessageTarget errorTarget = new NodeMessageTarget();
        IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(softwareComponent, "Robustness: Most Likely -> " + mostlikely + "and index= " + indexChosen, "r:1524284d-b0a0-4e87-9b87-3259ef92f715(Component_v1.typesystem)", "9006907811572895665", null, errorTarget);
      }
      // Expected value of cost
      double expected = (((double) ListSequence.fromList(NFR_minValues).getElement(indexChosen)) + ((double) ListSequence.fromList(NFR_maxValues).getElement(indexChosen)) + ((double) 4) * ((double) ListSequence.fromList(NFR_mostlikelyValues).getElement(indexChosen))) / ((double) 6);
      {
        final MessageTarget errorTarget = new NodeMessageTarget();
        IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(softwareComponent, "Computed Expected value for Robustness is : " + expected, "r:1524284d-b0a0-4e87-9b87-3259ef92f715(Component_v1.typesystem)", "9006907811572895714", null, errorTarget);
      }
      // Normalized Expected value
      double range = ((double) ListSequence.fromList(NFR_maxValues).getElement(indexChosen)) - ((double) ListSequence.fromList(NFR_minValues).getElement(indexChosen));
      double numerator = expected - ((double) ListSequence.fromList(NFR_minValues).getElement(indexChosen));
      double normalizedval = ((double) numerator) / ((double) range);
      int k = ((int) (normalizedval * 100));
      normalizedval = ((double) (((double) k) / ((double) 100)));
      {
        final MessageTarget errorTarget = new NodeMessageTarget();
        IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(softwareComponent, "Normalized value for Expected Robustness is " + normalizedval, "r:1524284d-b0a0-4e87-9b87-3259ef92f715(Component_v1.typesystem)", "9006907811572895789", null, errorTarget);
      }
      flag = 0;
    }
    max = 0;
    min = 0;
    mostlikely = 0;
    indexChosen = 0;
    for (String item : NFR_names) {
      int index = ListSequence.fromList(NFR_names).indexOf(item);
      if (item.contains("EnergyEfficiency")) {
        flag = 1;
        int temp = ((int) ListSequence.fromList(NFR_mostlikelyValues).getElement(index));
        if (mostlikely == 0) {
          mostlikely = temp;
        }
        if (mostlikely >= temp) {
          mostlikely = temp;
          indexChosen = index;
        }
      }
    }
    if (flag == 1) {
      {
        final MessageTarget errorTarget = new NodeMessageTarget();
        IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(softwareComponent, "Energy Efficiency: Most Likely -> " + mostlikely + "and index= " + indexChosen, "r:1524284d-b0a0-4e87-9b87-3259ef92f715(Component_v1.typesystem)", "9006907811572895912", null, errorTarget);
      }
      // Expected value of cost
      double expected = (((double) ListSequence.fromList(NFR_minValues).getElement(indexChosen)) + ((double) ListSequence.fromList(NFR_maxValues).getElement(indexChosen)) + ((double) 4) * ((double) ListSequence.fromList(NFR_mostlikelyValues).getElement(indexChosen))) / ((double) 6);
      {
        final MessageTarget errorTarget = new NodeMessageTarget();
        IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(softwareComponent, "Computed Expected value for Energy Efficiency is : " + expected, "r:1524284d-b0a0-4e87-9b87-3259ef92f715(Component_v1.typesystem)", "9006907811572895961", null, errorTarget);
      }
      // Normalized Expected value
      double range = ((double) ListSequence.fromList(NFR_maxValues).getElement(indexChosen)) - ((double) ListSequence.fromList(NFR_minValues).getElement(indexChosen));
      double numerator = expected - ((double) ListSequence.fromList(NFR_minValues).getElement(indexChosen));
      double normalizedval = ((double) numerator) / ((double) range);
      int k = ((int) (normalizedval * 100));
      normalizedval = ((double) (((double) k) / ((double) 100)));
      {
        final MessageTarget errorTarget = new NodeMessageTarget();
        IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(softwareComponent, "Normalized value for Expected Energy Efficiency is " + normalizedval, "r:1524284d-b0a0-4e87-9b87-3259ef92f715(Component_v1.typesystem)", "9006907811572896036", null, errorTarget);
      }
      flag = 0;
    }
    max = 0;
    min = 0;
    mostlikely = 0;
    indexChosen = 0;
    for (String item : NFR_names) {
      int index = ListSequence.fromList(NFR_names).indexOf(item);
      if (item.contains("Mobility")) {
        flag = 1;
        int temp = ((int) ListSequence.fromList(NFR_mostlikelyValues).getElement(index));
        if (mostlikely == 0) {
          mostlikely = temp;
        }
        if (mostlikely >= temp) {
          mostlikely = temp;
          indexChosen = index;
        }
      }
    }
    if (flag == 1) {
      {
        final MessageTarget errorTarget = new NodeMessageTarget();
        IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(softwareComponent, "Mobility: Most Likely -> " + mostlikely + "and index= " + indexChosen, "r:1524284d-b0a0-4e87-9b87-3259ef92f715(Component_v1.typesystem)", "9006907811572896159", null, errorTarget);
      }
      // Expected value of cost
      double expected = (((double) ListSequence.fromList(NFR_minValues).getElement(indexChosen)) + ((double) ListSequence.fromList(NFR_maxValues).getElement(indexChosen)) + ((double) 4) * ((double) ListSequence.fromList(NFR_mostlikelyValues).getElement(indexChosen))) / ((double) 6);
      {
        final MessageTarget errorTarget = new NodeMessageTarget();
        IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(softwareComponent, "Computed Expected value for Mobility is : " + expected, "r:1524284d-b0a0-4e87-9b87-3259ef92f715(Component_v1.typesystem)", "9006907811572896208", null, errorTarget);
      }
      // Normalized Expected value
      double range = ((double) ListSequence.fromList(NFR_maxValues).getElement(indexChosen)) - ((double) ListSequence.fromList(NFR_minValues).getElement(indexChosen));
      double numerator = expected - ((double) ListSequence.fromList(NFR_minValues).getElement(indexChosen));
      double normalizedval = ((double) numerator) / ((double) range);
      int k = ((int) (normalizedval * 100));
      normalizedval = ((double) (((double) k) / ((double) 100)));
      {
        final MessageTarget errorTarget = new NodeMessageTarget();
        IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(softwareComponent, "Normalized value for Expected Mobility is " + normalizedval, "r:1524284d-b0a0-4e87-9b87-3259ef92f715(Component_v1.typesystem)", "9006907811572896283", null, errorTarget);
      }
      flag = 0;
    }
    max = 0;
    min = 0;
    mostlikely = 0;
    indexChosen = 0;
    for (String item : NFR_names) {
      int index = ListSequence.fromList(NFR_names).indexOf(item);
      if (item.contains("Safety")) {
        flag = 1;
        int temp = ((int) ListSequence.fromList(NFR_mostlikelyValues).getElement(index));
        if (mostlikely == 0) {
          mostlikely = temp;
        }
        if (mostlikely <= temp) {
          mostlikely = temp;
          indexChosen = index;
        }
      }
    }
    if (flag == 1) {
      {
        final MessageTarget errorTarget = new NodeMessageTarget();
        IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(softwareComponent, "Safety: Most Likely -> " + mostlikely + "and index= " + indexChosen, "r:1524284d-b0a0-4e87-9b87-3259ef92f715(Component_v1.typesystem)", "9006907811572896406", null, errorTarget);
      }
      // Expected value of cost
      double expected = (((double) ListSequence.fromList(NFR_minValues).getElement(indexChosen)) + ((double) ListSequence.fromList(NFR_maxValues).getElement(indexChosen)) + ((double) 4) * ((double) ListSequence.fromList(NFR_mostlikelyValues).getElement(indexChosen))) / ((double) 6);
      {
        final MessageTarget errorTarget = new NodeMessageTarget();
        IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(softwareComponent, "Computed Expected value for Safety is : " + expected, "r:1524284d-b0a0-4e87-9b87-3259ef92f715(Component_v1.typesystem)", "9006907811572896455", null, errorTarget);
      }
      // Normalized Expected value
      double range = ((double) ListSequence.fromList(NFR_maxValues).getElement(indexChosen)) - ((double) ListSequence.fromList(NFR_minValues).getElement(indexChosen));
      double numerator = expected - ((double) ListSequence.fromList(NFR_minValues).getElement(indexChosen));
      double normalizedval = ((double) numerator) / ((double) range);
      int k = ((int) (normalizedval * 100));
      normalizedval = ((double) (((double) k) / ((double) 100)));
      {
        final MessageTarget errorTarget = new NodeMessageTarget();
        IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(softwareComponent, "Normalized value for Expected Safety is " + normalizedval, "r:1524284d-b0a0-4e87-9b87-3259ef92f715(Component_v1.typesystem)", "9006907811572896530", null, errorTarget);
      }
      flag = 0;
    }
    max = 0;
    min = 0;
    mostlikely = 0;
    indexChosen = 0;
    for (String item : NFR_names) {
      int index = ListSequence.fromList(NFR_names).indexOf(item);
      if (item.contains("Reliability")) {
        flag = 1;
        int temp = ((int) ListSequence.fromList(NFR_mostlikelyValues).getElement(index));
        if (mostlikely == 0) {
          mostlikely = temp;
        }
        if (mostlikely <= temp) {
          mostlikely = temp;
          indexChosen = index;
        }
      }
    }
    if (flag == 1) {
      {
        final MessageTarget errorTarget = new NodeMessageTarget();
        IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(softwareComponent, "Reliability: Most Likely -> " + mostlikely + "and index= " + indexChosen, "r:1524284d-b0a0-4e87-9b87-3259ef92f715(Component_v1.typesystem)", "9006907811572896653", null, errorTarget);
      }
      // Expected value of cost
      double expected = (((double) ListSequence.fromList(NFR_minValues).getElement(indexChosen)) + ((double) ListSequence.fromList(NFR_maxValues).getElement(indexChosen)) + ((double) 4) * ((double) ListSequence.fromList(NFR_mostlikelyValues).getElement(indexChosen))) / ((double) 6);
      {
        final MessageTarget errorTarget = new NodeMessageTarget();
        IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(softwareComponent, "Computed Expected value for Reliability is : " + expected, "r:1524284d-b0a0-4e87-9b87-3259ef92f715(Component_v1.typesystem)", "9006907811572896702", null, errorTarget);
      }
      // Normalized Expected value
      double range = ((double) ListSequence.fromList(NFR_maxValues).getElement(indexChosen)) - ((double) ListSequence.fromList(NFR_minValues).getElement(indexChosen));
      double numerator = expected - ((double) ListSequence.fromList(NFR_minValues).getElement(indexChosen));
      double normalizedval = ((double) numerator) / ((double) range);
      int k = ((int) (normalizedval * 100));
      normalizedval = ((double) (((double) k) / ((double) 100)));
      {
        final MessageTarget errorTarget = new NodeMessageTarget();
        IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(softwareComponent, "Normalized value for Expected Reliability is " + normalizedval, "r:1524284d-b0a0-4e87-9b87-3259ef92f715(Component_v1.typesystem)", "9006907811572896777", null, errorTarget);
      }
      flag = 0;
    }
    max = 0;
    min = 0;
    mostlikely = 0;
    indexChosen = 0;
    for (String item : NFR_names) {
      int index = ListSequence.fromList(NFR_names).indexOf(item);
      if (item.contains("Privacy")) {
        flag = 1;
        int temp = ((int) ListSequence.fromList(NFR_mostlikelyValues).getElement(index));
        if (mostlikely == 0) {
          mostlikely = temp;
        }
        if (mostlikely >= temp) {
          mostlikely = temp;
          indexChosen = index;
        }
      }
    }
    if (flag == 1) {
      {
        final MessageTarget errorTarget = new NodeMessageTarget();
        IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(softwareComponent, "Privacy: Most Likely -> " + mostlikely + "and index= " + indexChosen, "r:1524284d-b0a0-4e87-9b87-3259ef92f715(Component_v1.typesystem)", "9006907811572896900", null, errorTarget);
      }
      // Expected value of cost
      double expected = (((double) ListSequence.fromList(NFR_minValues).getElement(indexChosen)) + ((double) ListSequence.fromList(NFR_maxValues).getElement(indexChosen)) + ((double) 4) * ((double) ListSequence.fromList(NFR_mostlikelyValues).getElement(indexChosen))) / ((double) 6);
      {
        final MessageTarget errorTarget = new NodeMessageTarget();
        IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(softwareComponent, "Computed Expected value for Privacy is : " + expected, "r:1524284d-b0a0-4e87-9b87-3259ef92f715(Component_v1.typesystem)", "9006907811572896949", null, errorTarget);
      }
      // Normalized Expected value
      double range = ((double) ListSequence.fromList(NFR_maxValues).getElement(indexChosen)) - ((double) ListSequence.fromList(NFR_minValues).getElement(indexChosen));
      double numerator = expected - ((double) ListSequence.fromList(NFR_minValues).getElement(indexChosen));
      double normalizedval = ((double) numerator) / ((double) range);
      int k = ((int) (normalizedval * 100));
      normalizedval = ((double) (((double) k) / ((double) 100)));
      {
        final MessageTarget errorTarget = new NodeMessageTarget();
        IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(softwareComponent, "Normalized value for Expected Privacy is " + normalizedval, "r:1524284d-b0a0-4e87-9b87-3259ef92f715(Component_v1.typesystem)", "9006907811572897024", null, errorTarget);
      }
      flag = 0;
    }
    max = 0;
    min = 0;
    mostlikely = 0;
    indexChosen = 0;
    for (String item : NFR_names) {
      int index = ListSequence.fromList(NFR_names).indexOf(item);
      if (item.contains("Calmness")) {
        flag = 1;
        int temp = ((int) ListSequence.fromList(NFR_mostlikelyValues).getElement(index));
        if (mostlikely == 0) {
          mostlikely = temp;
        }
        if (mostlikely >= temp) {
          mostlikely = temp;
          indexChosen = index;
        }
      }
    }
    if (flag == 1) {
      {
        final MessageTarget errorTarget = new NodeMessageTarget();
        IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(softwareComponent, "Calmness: Most Likely -> " + mostlikely + "and index= " + indexChosen, "r:1524284d-b0a0-4e87-9b87-3259ef92f715(Component_v1.typesystem)", "9006907811572897147", null, errorTarget);
      }
      // Expected value of cost
      double expected = (((double) ListSequence.fromList(NFR_minValues).getElement(indexChosen)) + ((double) ListSequence.fromList(NFR_maxValues).getElement(indexChosen)) + ((double) 4) * ((double) ListSequence.fromList(NFR_mostlikelyValues).getElement(indexChosen))) / ((double) 6);
      {
        final MessageTarget errorTarget = new NodeMessageTarget();
        IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(softwareComponent, "Computed Expected value for Calmness is : " + expected, "r:1524284d-b0a0-4e87-9b87-3259ef92f715(Component_v1.typesystem)", "9006907811572897196", null, errorTarget);
      }
      // Normalized Expected value
      double range = ((double) ListSequence.fromList(NFR_maxValues).getElement(indexChosen)) - ((double) ListSequence.fromList(NFR_minValues).getElement(indexChosen));
      double numerator = expected - ((double) ListSequence.fromList(NFR_minValues).getElement(indexChosen));
      double normalizedval = ((double) numerator) / ((double) range);
      int k = ((int) (normalizedval * 100));
      normalizedval = ((double) (((double) k) / ((double) 100)));
      {
        final MessageTarget errorTarget = new NodeMessageTarget();
        IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(softwareComponent, "Normalized value for Expected Calmness is " + normalizedval, "r:1524284d-b0a0-4e87-9b87-3259ef92f715(Component_v1.typesystem)", "9006907811572897271", null, errorTarget);
      }
      flag = 0;
    }
  }
  public SAbstractConcept getApplicableConcept() {
    return CONCEPTS.SoftwareComponent$Pn;
  }
  public IsApplicableStatus isApplicableAndPattern(SNode argument) {
    return new IsApplicableStatus(argument.getConcept().isSubConceptOf(getApplicableConcept()), null);
  }
  public boolean overrides() {
    return false;
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink component$pKqJ = MetaAdapterFactory.getContainmentLink(0x79fb875b5c4f4986L, 0x892e2475e9d0c842L, 0x6a627af554be7034L, 0x2d838283918d4b44L, "component");
    /*package*/ static final SContainmentLink nfr$Ta7D = MetaAdapterFactory.getContainmentLink(0x79fb875b5c4f4986L, 0x892e2475e9d0c842L, 0x2d838283918d4b38L, 0x2d838283918d4b41L, "nfr");
  }

  private static final class PROPS {
    /*package*/ static final SProperty id$T3zd = MetaAdapterFactory.getProperty(0x79fb875b5c4f4986L, 0x892e2475e9d0c842L, 0x2d838283918d4b38L, 0x2d838283918d4b3aL, "id");
    /*package*/ static final SProperty maxvalue$kjfB = MetaAdapterFactory.getProperty(0xddad85b58f7640d8L, 0x9a0dbd322c713e77L, 0x6a627af554ccd696L, 0x2405e2b0a90506f6L, "maxvalue");
    /*package*/ static final SProperty minvalue$kjWE = MetaAdapterFactory.getProperty(0xddad85b58f7640d8L, 0x9a0dbd322c713e77L, 0x6a627af554ccd696L, 0x2405e2b0a90506f9L, "minvalue");
    /*package*/ static final SProperty mostlikely$kpO3 = MetaAdapterFactory.getProperty(0xddad85b58f7640d8L, 0x9a0dbd322c713e77L, 0x6a627af554ccd696L, 0x2405e2b0a90506fdL, "mostlikely");
    /*package*/ static final SProperty nfrmetric$kiL_ = MetaAdapterFactory.getProperty(0xddad85b58f7640d8L, 0x9a0dbd322c713e77L, 0x6a627af554ccd696L, 0x2405e2b0a90506f4L, "nfrmetric");
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept SoftwareComponent$Pn = MetaAdapterFactory.getConcept(0x79fb875b5c4f4986L, 0x892e2475e9d0c842L, 0x6a627af554be7034L, "Component_v1.structure.SoftwareComponent");
  }
}
